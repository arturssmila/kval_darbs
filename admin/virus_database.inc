<?php
$elements = array(
		'chr('		=> array(	//tcpdf faili
						'$this->frame[$at[\'y\']][$at[\'x\']] = chr($val);', 
						'$frame[8][$width - 1 - $i] = chr($v);', 
						'$frame[$i][8] = chr($v);', 
						'$frame[$i + 1][8] = chr($v);', 
						'$frame[$width - 7 + $i][8] = chr($v);', 
						'$frame[8][7] = chr($v);', 
						'$frame[8][6 - $i] = chr($v);', 
						'$d[$y][$x] = chr(ord($s[$y][$x]) ^ ((int)($bitMask[$y][$x])));', 
						'$this->dataStr[$p] = chr(ord($this->dataStr[$p]) - 32);', 
						'$frame[6][7+$i] = chr(0x90 | ($i & 1));', 
						'$frame[7+$i][6] = chr(0x90 | ($i & 1));', 
						'$frame[($width - 11)+$y][$x] = chr(0x88 | ($v & 1));', 
						'$frame[$y][$x+($width - 11)] = chr(0x88 | ($v & 1));',
						'$decoded .= chr($tuple >> 24)',
						'$zseq = chr(0).chr(0).chr(0).chr(0);', 
						'$dictionary[$i] = chr($i);',
						'$eplain .= chr($chr ^ ($r >> 8));',
						'return chr($c);',
						'$outstr .= chr($w',
						'$outstr .= chr($char',
						'= chr(bindec(substr($binprot,',
						'] = sprintf(\'q %s BT /F%d %F Tf %F %F Td (\'.chr(',
						'$this->gradients[$n][\'stream\'] .= chr(',
						'$pos2 = intval(TCPDF_STATIC::revstrpos($pmid,',
						'return self::unichr($c,',
						'TCPDF_FONTS::unichr($',
						'$keys_a .= chr(',							
						'$sval = chr($ccom[($i + 1)]).chr($ccom[($i + 2)]).chr($ccom[($i + 3)]).chr($ccom[($i + 4)]);', 
						'public static function unichr($c, $unicode=true) {', 
						'return chr(0xC0 | $c >> 6).chr(0x80 | $c & 0x3F);', 
						'return chr(0xE0 | $c >> 12).chr(0x80 | $c >> 6 & 0x3F).chr(0x80 | $c & 0x3F);', 
						'return chr(0xF0 | $c >> 18).chr(0x80 | $c >> 12 & 0x3F).chr(0x80 | $c >> 6 & 0x3F).chr(0x80 | $c & 0x3F);', 
						'$string .= self::unichr($strarr[$i], $unicode);', 
						'$map[($cid * 2)] = chr($gid >> 8);', 
						'$map[(($cid * 2) + 1)] = chr($gid & 0xFF);', 
						'$outstr .= chr(TCPDF_FONT_DATA::$uni_utf8tolatin[$char]);',
						'if (fread($f, 8) != chr(137).\'PNG\'.chr(13).chr(10).chr(26).chr(10)) {',
						
						'* <li>UTF-8 character: chr(194).chr(173)</li>',
						'// the chr(13) substitution fixes the Bugs item #1421290.', 
						"return strtr(\$s, array(')' => '", 
						'$text .= str_repeat(chr($padding), $padding);', 
						'$out .= chr(ord($text[$i]) ^ $k);', 
						'$string .= chr(hexdec($bs[$i].$bs[($i + 1)]));',
						
						'public function unichr($c) {', 
						'$txt = str_replace(TCPDF_FONTS::unichr(160, $this->isunicode), \' \', $txt);', 
						'$ns = substr_count($txt, chr(32));', 
						'$txt2 = str_replace(chr(0).chr(32), \') \'.sprintf(\'%F\', $spacewidth).\' (\', $txt2);', 
						'$xmp = \'<?xpacket begin="\'.TCPDF_FONTS::unichr(0xfeff, $this->isunicode).\'" id="W5M0MpCehiHzreSzNTczkc9d"?>\'."\n";', 
						'$this->_out(\'%\'.chr(0xe2).chr(0xe3).chr(0xcf).chr(0xd3));', 
						'$ek .= chr(ord($this->encryptdata[\'key\'][$j]) ^ $i);', 
						'$ek .= chr(ord($owner_key[$j]) ^ $i);', 
						'$perms .= chr(255).chr(255).chr(255).chr(255); // bytes 4-7', 
						'$html = preg_replace(\'/\'.$this->re_space[\'p\'].\'+<img/\'.$this->re_space[\'m\'], chr(32).\'<img\', $html);', 
						'$html = preg_replace(\'/\'.$this->re_space[\'p\'].\'+/\'.$this->re_space[\'m\'], chr(32), $html); // replace multiple spaces with a single space', 
						'$spacestr = chr(32);', 
						'$spacestr = chr(0).chr(32);', 
						'$one_space_width = $this->GetStringWidth(chr(32));', 
						'$newpmid = \'[(\'.str_replace(chr(0).chr(32), \') \'.sprintf(\'%F\', $spacew).\' (\', $replace).\')]\';', 
						'$dom[$key][\'value\'] = preg_replace(\'/^\'.$this->re_space[\'p\'].\'+$/\'.$this->re_space[\'m\'], chr(32), $dom[$key][\'value\']);', 
						'$one_space_width = $this->GetStringWidth(chr(32));', 
						'$w = intval($tag[\'attribute\'][\'size\']) * $this->GetStringWidth(chr(32)) * 2;', 
						'$w = intval($tag[\'attribute\'][\'cols\']) * $this->GetStringWidth(chr(32)) * 2;', 
						'$textitem = chr(97 + $this->listcount[$this->listnum] - 1);', 
						'$textitem = chr(65 + $this->listcount[$this->listnum] - 1);', 
						'$textitem = TCPDF_FONTS::unichr((945 + $this->listcount[$this->listnum] - 1), $this->isunicode);', 
						'$spacer = $this->GetStringWidth(chr(32)) * 4;', 
						'if (chr($char) == \'<\') {', 
						'} elseif ($intag AND (chr($char) == \'>\')) {',
						
						'chr(0) => \'%U\', chr(1) => \'$A\', chr(2) => \'$B\', chr(3) => \'$C\',', 
						'chr(4) => \'$D\', chr(5) => \'$E\', chr(6) => \'$F\', chr(7) => \'$G\',', 
						'chr(8) => \'$H\', chr(9) => \'$I\', chr(10) => \'$J\', chr(11) => \'£K\',', 
						'chr(12) => \'$L\', chr(13) => \'$M\', chr(14) => \'$N\', chr(15) => \'$O\',', 
						'chr(16) => \'$P\', chr(17) => \'$Q\', chr(18) => \'$R\', chr(19) => \'$S\',', 
						'chr(20) => \'$T\', chr(21) => \'$U\', chr(22) => \'$V\', chr(23) => \'$W\',', 
						'chr(24) => \'$X\', chr(25) => \'$Y\', chr(26) => \'$Z\', chr(27) => \'%A\',', 
						'chr(28) => \'%B\', chr(29) => \'%C\', chr(30) => \'%D\', chr(31) => \'%E\',', 
						'chr(32) => \' \', chr(33) => \'/A\', chr(34) => \'/B\', chr(35) => \'/C\',', 
						'chr(36) => \'/D\', chr(37) => \'/E\', chr(38) => \'/F\', chr(39) => \'/G\',', 
						'chr(40) => \'/H\', chr(41) => \'/I\', chr(42) => \'/J\', chr(43) => \'/K\',', 
						'chr(44) => \'/L\', chr(45) => \'-\', chr(46) => \'.\', chr(47) => \'/O\',', 
						'chr(48) => \'0\', chr(49) => \'1\', chr(50) => \'2\', chr(51) => \'3\',', 
						'chr(52) => \'4\', chr(53) => \'5\', chr(54) => \'6\', chr(55) => \'7\',', 
						'chr(56) => \'8\', chr(57) => \'9\', chr(58) => \'/Z\', chr(59) => \'%F\',', 
						'chr(60) => \'%G\', chr(61) => \'%H\', chr(62) => \'%I\', chr(63) => \'%J\',', 
						'chr(64) => \'%V\', chr(65) => \'A\', chr(66) => \'B\', chr(67) => \'C\',', 
						'chr(68) => \'D\', chr(69) => \'E\', chr(70) => \'F\', chr(71) => \'G\',', 
						'chr(72) => \'H\', chr(73) => \'I\', chr(74) => \'J\', chr(75) => \'K\',', 
						'chr(76) => \'L\', chr(77) => \'M\', chr(78) => \'N\', chr(79) => \'O\',', 
						'chr(80) => \'P\', chr(81) => \'Q\', chr(82) => \'R\', chr(83) => \'S\',', 
						'chr(84) => \'T\', chr(85) => \'U\', chr(86) => \'V\', chr(87) => \'W\',', 
						'chr(88) => \'X\', chr(89) => \'Y\', chr(90) => \'Z\', chr(91) => \'%K\',', 
						'chr(92) => \'%L\', chr(93) => \'%M\', chr(94) => \'%N\', chr(95) => \'%O\',', 
						'chr(96) => \'%W\', chr(97) => \'+A\', chr(98) => \'+B\', chr(99) => \'+C\',', 
						'chr(100) => \'+D\', chr(101) => \'+E\', chr(102) => \'+F\', chr(103) => \'+G\',', 
						'chr(104) => \'+H\', chr(105) => \'+I\', chr(106) => \'+J\', chr(107) => \'+K\',', 
						'chr(108) => \'+L\', chr(109) => \'+M\', chr(110) => \'+N\', chr(111) => \'+O\',', 
						'chr(112) => \'+P\', chr(113) => \'+Q\', chr(114) => \'+R\', chr(115) => \'+S\',', 
						'chr(116) => \'+T\', chr(117) => \'+U\', chr(118) => \'+V\', chr(119) => \'+W\',', 
						'chr(120) => \'+X\', chr(121) => \'+Y\', chr(122) => \'+Z\', chr(123) => \'%P\',', 
						'chr(124) => \'%Q\', chr(125) => \'%R\', chr(126) => \'%S\', chr(127) => \'%T\');', 
						'chr(0) => chr(131).\'U\', chr(1) => chr(128).\'A\', chr(2) => chr(128).\'B\', chr(3) => chr(128).\'C\',', 
						'chr(4) => chr(128).\'D\', chr(5) => chr(128).\'E\', chr(6) => chr(128).\'F\', chr(7) => chr(128).\'G\',', 
						'chr(8) => chr(128).\'H\', chr(9) => chr(128).\'I\', chr(10) => chr(128).\'J\', chr(11) => \'£K\',', 
						'chr(12) => chr(128).\'L\', chr(13) => chr(128).\'M\', chr(14) => chr(128).\'N\', chr(15) => chr(128).\'O\',', 
						'chr(16) => chr(128).\'P\', chr(17) => chr(128).\'Q\', chr(18) => chr(128).\'R\', chr(19) => chr(128).\'S\',', 
						'chr(20) => chr(128).\'T\', chr(21) => chr(128).\'U\', chr(22) => chr(128).\'V\', chr(23) => chr(128).\'W\',', 
						'chr(24) => chr(128).\'X\', chr(25) => chr(128).\'Y\', chr(26) => chr(128).\'Z\', chr(27) => chr(131).\'A\',', 
						'chr(28) => chr(131).\'B\', chr(29) => chr(131).\'C\', chr(30) => chr(131).\'D\', chr(31) => chr(131).\'E\',', 
						'chr(32) => \' \', chr(33) => chr(129).\'A\', chr(34) => chr(129).\'B\', chr(35) => chr(129).\'C\',', 
						'chr(36) => chr(129).\'D\', chr(37) => chr(129).\'E\', chr(38) => chr(129).\'F\', chr(39) => chr(129).\'G\',', 
						'chr(40) => chr(129).\'H\', chr(41) => chr(129).\'I\', chr(42) => chr(129).\'J\', chr(43) => chr(129).\'K\',', 
						'chr(44) => chr(129).\'L\', chr(45) => \'-\', chr(46) => \'.\', chr(47) => chr(129).\'O\',', 
						'chr(48) => \'0\', chr(49) => \'1\', chr(50) => \'2\', chr(51) => \'3\',', 
						'chr(52) => \'4\', chr(53) => \'5\', chr(54) => \'6\', chr(55) => \'7\',', 
						'chr(56) => \'8\', chr(57) => \'9\', chr(58) => chr(129).\'Z\', chr(59) => chr(131).\'F\',', 
						'chr(60) => chr(131).\'G\', chr(61) => chr(131).\'H\', chr(62) => chr(131).\'I\', chr(63) => chr(131).\'J\',', 
						'chr(64) => chr(131).\'V\', chr(65) => \'A\', chr(66) => \'B\', chr(67) => \'C\',', 
						'chr(68) => \'D\', chr(69) => \'E\', chr(70) => \'F\', chr(71) => \'G\',', 
						'chr(72) => \'H\', chr(73) => \'I\', chr(74) => \'J\', chr(75) => \'K\',', 
						'chr(76) => \'L\', chr(77) => \'M\', chr(78) => \'N\', chr(79) => \'O\',', 
						'chr(80) => \'P\', chr(81) => \'Q\', chr(82) => \'R\', chr(83) => \'S\',', 
						'chr(84) => \'T\', chr(85) => \'U\', chr(86) => \'V\', chr(87) => \'W\',', 
						'chr(88) => \'X\', chr(89) => \'Y\', chr(90) => \'Z\', chr(91) => chr(131).\'K\',', 
						'chr(92) => chr(131).\'L\', chr(93) => chr(131).\'M\', chr(94) => chr(131).\'N\', chr(95) => chr(131).\'O\',', 
						'chr(96) => chr(131).\'W\', chr(97) => chr(130).\'A\', chr(98) => chr(130).\'B\', chr(99) => chr(130).\'C\',', 
						'chr(100) => chr(130).\'D\', chr(101) => chr(130).\'E\', chr(102) => chr(130).\'F\', chr(103) => chr(130).\'G\',', 
						'chr(104) => chr(130).\'H\', chr(105) => chr(130).\'I\', chr(106) => chr(130).\'J\', chr(107) => chr(130).\'K\',', 
						'chr(108) => chr(130).\'L\', chr(109) => chr(130).\'M\', chr(110) => chr(130).\'N\', chr(111) => chr(130).\'O\',', 
						'chr(112) => chr(130).\'P\', chr(113) => chr(130).\'Q\', chr(114) => chr(130).\'R\', chr(115) => chr(130).\'S\',', 
						'chr(116) => chr(130).\'T\', chr(117) => chr(130).\'U\', chr(118) => chr(130).\'V\', chr(119) => chr(130).\'W\',', 
						'chr(120) => chr(130).\'X\', chr(121) => chr(130).\'Y\', chr(122) => chr(130).\'Z\', chr(123) => chr(131).\'P\',', 
						'chr(124) => chr(131).\'Q\', chr(125) => chr(131).\'R\', chr(126) => chr(131).\'S\', chr(127) => chr(131).\'T\');', 
						'$code = strtr($code, chr(128).chr(131).chr(129).chr(130), \'<=>?\');', 
						'$checksum = strtr($checksum, \'<=>?\', chr(128).chr(131).chr(129).chr(130));', 
						'$keys_b = \' !"#$%&\\\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[',
						),
		'Hack'			=> array(
						'hack for sticky footer',
						"hack around with the include paths a bit so the library 'just works'",
						'HACK: this is required for list support that starts with a user id',
						),
		'system(\'unzip'	=> array(
						
						),
		'zip_open'	=> array(
						
						),
		'$GLOBALS'		=> array(
						'$GLOBALS[\'cfg',
						),
		'@include'		=> array(
						'$l = @include $lang_path.\'phpmailer.lang-\'.$langcode.\'.php\';',
						),
		'$_COOKIE'		=> array(
						'$mail = $_COOKIE["mail"];',
						'<span class="nv">$_COOKIE</span>',
						'$compiled_ref = \'$_COOKIE\';',
						'if(empty($_COOKIE[session_name()]) &&',
						'if (isset($_COOKIE[\'SMARTY_DEBUG\'])) {',
						),
		'fileperms'		=> array(),
		'create_function'	=> array(
						'$camel_func = create_function(',
						),
		'eval'			=> array(
						'Evalue()',
						'evaluate',
						'revalidat',
						'nodeValue',
						'primitiveValue',
						'eval($content);',
						'public $nodeValue;',
						'eval($_code);',
						'eval("?>" . $output);',
						'if ($resource_type != \'eval\') {',
						'if (in_array($resource_type, array(',
						'* Smarty Internal Plugin Resource Eval',
						'class Smarty_Internal_Resource_Eval {',
						"return 'eval:';",
						'* Compiles the {eval} tag',
						', $eplain, $matches) > 0) {',
						'$tmp = $include_file;");',
						'eval($result[2][0]);',
						'eval(\'$_file = \' . $_attr[\'file\'] . \';\');',
						'merge filedependency by evaluating header code',
						'eval (\'$tmp=\'.$_data.\';\');',
						'eval(\'$_name = \' . $_attr[\'name\'] . \';\');',
						'eval(\'$_script = \' . $_attr[\'script\'] . \';\');',
						'// do not cache eval resources',
						'remove eval-modifier from $search',
						'* Compiles code for the {eval} tag',
						'* Smarty Internal Plugin Compile Eval',
						'eval("?>" . $this->compiled_template);',
						'$smarty_math_result = ".$equation.";");',
						'<script type="text/javascript">eval(unescape(',
						'(equivalent to eval()) is probably not a good idea',
						'$_template = new {$compiler->smarty->template_class}(',
						'eval(\'$include_file = \' . $_attr[\'file\'] . \';\');',
						'if (in_array($_template->resource_type,array(\'eval\',\'string\'))) {',
						'class Smarty_Internal_Compile_Eval extends Smarty_Internal_CompileBase {',
						'], $compiler->smarty, $compiler->template, $compiler->template->cache_id,',
						),
					);
return $elements;
?>